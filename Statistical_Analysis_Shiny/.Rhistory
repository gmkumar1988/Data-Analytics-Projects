y = penguins$body_mass_g,
linetype = species)) +
facet_wrap(sex~species)
ggplot(data= penguins) +
geom_smooth(mapping = aes(x = penguins$flipper_length_mm,
y = penguins$body_mass_g,
linetype = species)) +
facet_grid(sex~species)
scipy(10000)
scipi(10000)
ggplot(data= penguins) +
geom_smooth(mapping = aes(x = penguins$flipper_length_mm,
y = penguins$body_mass_g)) +
facet_grid(sex~species)
ggplot(data= penguins) +
geom_point(mapping = aes(x = penguins$flipper_length_mm,
y = penguins$body_mass_g)) +
facet_grid(sex~species)
ggplot(data= penguins) +
geom_point(mapping = aes(x = penguins$flipper_length_mm,
y = penguins$body_mass_g,
color = species)) +
facet_grid(sex~species)
hotel_booking <- https://www.kaggle.com/jessemostipak/hotel-booking-demand
library(here)
library(skimr)
library(janitor)
library(tidyverse)
bookings_df <- read_csv("/Users/maheshg/Dropbox/Sample Datasets Kaggle/GL0bk8O2Sja9G5PDtko2uQ_31e445d7ca64417eb45aeaa08ec90bf1_hotel_bookings.csv")
library(ggplot2)
ggplot(data = bookings_df) +
geom_point(mapping = aes(x = bookings_df$lead_time,
y = bookings_df$children))
ggplot(data = bookings_df) +
geom_point(mapping = aes(x = bookings_df$hotel,
fill = bookings_df$market_segment))
ggplot(data = bookings_df) +
geom_point(mapping = aes(x = bookings_df$hotel,y = bookings_df$children,
fill = bookings_df$market_segment))
library(tidyverse)
online_city_hotels <- filter(bookings_df,
(bookings_df$hotel == "City Hotel" &
bookings_df$market_segment == "Online TA"))
View(online_city_hotels)
online_city_hotels2 <- bookings_df |>
filter(bookings_df$hotel == "City Hotel") |>
filter(bookings_df$market_segment == "Online TA")
online_city_hotels2 <- bookings_df |>
filter(bookings_df$hotel == "City Hotel" &
bookings_df$market_segment == "Online TA")
View(online_city_hotels2)
x <- data("diamonds")
str(x)
summary(x)
View(x)
library(dplyr)
attach(penguins2)
library(palmerpenguins)
q()
q()
library(palmerpenguins)
library(ggplot2)
head(penguins)
library(dplyr)
install.packages("dplyr")
install.packages("tidyverse")
install.packages("e1071")
install.packages("rsample")
install.packages("caret")
install.packages("ROCR")
install.packages("partykit")
install.packages("randomForecast")
library(dplyr)
library(tidyverse)
library(e1071)
library(ROCR)
library(rsample)
install.packages ("C:/Users/johndoe/Desktop/rsample_0.0.2.tar.gz", repos = NULL, type="source")
library(e1071)
library(rsample)
customer_personality <- read.csv("/Users/maheshg/Library/CloudStorage/OneDrive-Microsoft365/Sample Datasets Kaggle/customerpersonality.csv")
head(customer_personality)
customer_personality <- read.csv("/Users/maheshg/Library/CloudStorage/OneDrive-Microsoft365/Sample Datasets Kaggle/customerpersonality.csv", header = TRUE,
sep = "\t")
head(customer_personality)
View(customer_personality)
arrange(customer_personality,customer_personality$Income)
customer_personality[customer_personality$Income <= 2000] <- "Simple Income"
is.na(customer_personality)
is.na(customer_personality$Income)
customer_personality |>
dplyr::mutate(customer_personality$Income = replace_na(customer_personality$Income, 0000))
?mutate
customer_personality[is.na(customer_personality$Income)] <- 0000
customer_personality[is.na(customer_personality)] <- 0000
customer_personality |>
dplyr::mutate(customer_personality = replace_na(customer_personality$Income, 0000))
is.na(customer_personality$Income)
customer_personality[customer_personality$Income <= 2000] <- "Simple Income"
customer_personality[customer_personality$Income <= 2000] <- "Simple Income"
str(customer_personality)
customer_personality[customer_personality$Income <= 2000] <- Simple Income
customer_personality[customer_personality$Income <= '2000'] <- "Simple Income"
customer_personality[customer_personality$Income <= 2000] <- "Simple Income"
customer_personality[is.na(customer_personality), ]<- 0000
customer_personality[customer_personality$Income <= 2000] <- "Simple Income"
customer_personality[customer_personality$Income <= 2000] <- "Simple Income"
glimpse(customer_personality)
class(customer_personality)
customer_personality[customer_personality$Income <= 2000] <- "Simple Income"
customer_personality[customer_personality$Income <= 2000] <- "Simple Income"
traceback()
customer_personality[customer_personality$Income <= 2000] <- "Simple Income"
customer_personality <- read.csv("/Users/maheshg/Library/CloudStorage/OneDrive-Microsoft365/Sample Datasets Kaggle/customerpersonality.csv", header = TRUE,
sep = "\t")
library(dplyr)
library(tidyverse)
library(e1071)
library(ROCR)
library(rsample)
library(randomForest)
library(caret)
library(partykit)
customer_personality[customer_personality$Income <= 2000] <- "Simple Income"
customer_personality[customer_personality$Income <= 20000] <- "Simple Income"
customer_personality[is.na(customer_personality), ]<- 0000
customer_personality |>
dplyr::mutate(customer_personality = replace_na(customer_personality$Income, 0000))
is.na(customer_personality)
is.na(customer_personality$Income)
customer_personality[is.na(customer_personality$Income), ]<- 0000
is.na(customer_personality$Income)
customer_personality[customer_personality$Income <= 20000] <- "Simple Income"
customer_behavior <- read.csv("/Users/maheshg/Library/CloudStorage/OneDrive-Microsoft365/Sample Datasets Kaggle/Customer_Behaviour.csv",
header = TRUE, sep = "\t")
head(customer_behavior)
customer_behavior <- read.csv("/Users/maheshg/Library/CloudStorage/OneDrive-Microsoft365/Sample Datasets Kaggle/Customer_Behaviour.csv",
header = TRUE)
head(customer_behavior)
glimpse(customer_behavior)
customer_behaviour[customer_behavior$Age <= 25] <- "Young"
customer_behavior[customer_behavior$Age <= 25] <- "Young"
customer_behavior[customer_behavior$Age <= 25] = "Young"
is.na(customer_behavior)
customer_behavior |>
dplyr::mutate(customer_behavior = replace_na(customer_behavior,0))
customer_behavior |>
dplyr::mutate(customer_behavior = replace_na(customer_behavior$Age,0))
customer_behavior |>
dplyr::mutate(customer_behavior = replace_na(customer_behavior$EstimatedSalary,0))
customer_behavior |>
dplyr::mutate(customer_behavior = replace_na(customer_behavior$Purchased,0))
customer_behavior[customer_behavior$Age <= 25] = "Young"
customer_behavior$Age[customer_behavior$Age <= 25] = "Young"
customer_behavior$Age[customer_behavior$Age <= 25] = "Young"
customer_behavior$Age[customer_behavior$Age > 25 & customer_behavior$Age <= 45] = "Adult"
customer_behavior$Age[(customer_behavior$Age != "Young") & (customer_behavior$Age != "Adult")] = "Middle Age"
customer_behavior$EstimatedSalary[customer_behavior$EstimatedSalary <= 5000 ] = "Low"
customer_behavior$EstimatedSalary[customer_behavior$EstimatedSalary > 5000 & customer_behavior$EstimatedSalary <= 9000] = "Moderate"
customer_behavior$EstimatedSalary[(customer_behavior$EstimatedSalary != "Low") & (customer_behavior$EstimatedSalary != "Moderate")] = "High"
customer_behavior_clean <- customer_behavior |>
mutate(Gender = as.factor(Gender),
Age = as.factor(Age),
EstimatedSalary = as.factor(EstimatedSalary),
Purchased = as.factor(Purchased)) |>
select(-User.ID)
colSums(is.na(customer_behavior_clean))
RNGkind(sample.kind = "Rounding")
set.seed(1234)
index <- sample(nrow(customer_behavior_clean), nrow(customer_behavior_clean) * 0.8)
customer_behavior_train <- customer_behavior_clean[index,]
customer_behviour_test <- customer_behavior_clean[-index,]
###Checking target proportion:
prop.table(table(customer_behavior_train$Purchased))
set.seed(1234)
customer_behavior_train_down <- downSample(x = customer_behavior_train |>
selec(-Purchased),
y = customer_behavior_train$Purchased,
yname = "Purchased")
customer_behavior_train_down <- downSample(x = customer_behavior_train |>
select(-Purchased),
y = customer_behavior_train$Purchased,
yname = "Purchased")
prop.table(table(customer_behavior_train_down$Purchased))
q()
library(dplyr)
library(tidyverse)
library(e1071)
library(ROCR)
library(rsample)
library(randomForest)
library(caret)
library(partykit)
library(dplyr)
library(tidyverse)
library(e1071)
library(ROCR)
library(rsample)
library(randomForest)
library(caret)
library(partykit)
customer_behavior <- read.csv("/Users/maheshg/Library/CloudStorage/OneDrive-Microsoft365/Sample Datasets Kaggle/Customer_Behaviour.csv",
header = TRUE)
customer_behavior |>
dplyr::mutate(customer_behavior = replace_na(customer_behavior$Purchased,0))
customer_behavior$Age[customer_behavior$Age <= 25] = "Young"
customer_behavior$Age[customer_behavior$Age > 25 & customer_behavior$Age <= 45] = "Adult"
customer_behavior$Age[(customer_behavior$Age != "Young") & (customer_behavior$Age != "Adult")] = "Middle Age"
customer_behavior$EstimatedSalary[customer_behavior$EstimatedSalary <= 5000 ] = "Low"
customer_behavior$EstimatedSalary[customer_behavior$EstimatedSalary > 5000 & customer_behavior$EstimatedSalary <= 9000] = "Moderate"
customer_behavior$EstimatedSalary[(customer_behavior$EstimatedSalary != "Low") & (customer_behavior$EstimatedSalary != "Moderate")] = "High"
customer_behavior_clean <- customer_behavior |>
mutate(Gender = as.factor(Gender),
Age = as.factor(Age),
EstimatedSalary = as.factor(EstimatedSalary),
Purchased = as.factor(Purchased)) |>
select(-User.ID)
colSums(is.na(customer_behavior_clean))
RNGkind(sample.kind = "Rounding")
set.seed(1234)
index <- sample(nrow(customer_behavior_clean), nrow(customer_behavior_clean) * 0.8)
customer_behavior_train <- customer_behavior_clean[index,]
customer_behviour_test <- customer_behavior_clean[-index,]
prop.table(table(customer_behavior_train$Purchased))
set.seed(1234)
customer_behavior_train_down <- downSample(x = customer_behavior_train |>
select(-Purchased),
y = customer_behavior_train$Purchased,
yname = "Purchased")
prop.table(table(customer_behavior_train_down$Purchased))
model_nb <- naiveBayes(formula = Purchased -., data = customer_behavior_train_down)
model_nb <- naiveBayes(formula = customer_behavior_train_down$Purchased~., data = customer_behavior_train_down)
rm(model_nb)
customer_behaviour_model_nb <- naiveBayes(formula = customer_behavior_train_down$Purchased~., data = customer_behavior_train_down)
customer_behaviour_model_nb
customer_prediction_naive <- predict(customer_behaviour_model_nb, newdata = customer_behviour_test, type = "class")
confusionMatrix(data = customer_prediction_naive, reference = customer_behviour_test$Purchased,
positive = "l")
confusionMatrix(data = customer_prediction_naive, reference = customer_behviour_test$Purchased,
positive = "1")
library(dplyr)
library(tidyverse)
library(e1071)
library(ROCR)
library(rsample)
library(randomForest)
library(caret)
library(partykit)
customer_behavior <- read.csv("/Users/maheshg/Library/CloudStorage/OneDrive-Microsoft365/Sample Datasets Kaggle/Customer_Behaviour.csv",
header = TRUE)
is.na(customer_behavior)
customer_behavior |>
dplyr::mutate(customer_behavior = replace_na(customer_behavior$Purchased,0))
customer_behavior$Age[customer_behavior$Age <= 25] = "Young"
customer_behavior$Age[customer_behavior$Age > 25 & customer_behavior$Age <= 45] = "Adult"
customer_behavior$Age[(customer_behavior$Age != "Young") & (customer_behavior$Age != "Adult")] = "Middle Age"
customer_behavior$EstimatedSalary[customer_behavior$EstimatedSalary <= 5000 ] = "Low"
customer_behavior$EstimatedSalary[customer_behavior$EstimatedSalary > 5000 & customer_behavior$EstimatedSalary <= 9000] = "Moderate"
customer_behavior$EstimatedSalary[(customer_behavior$EstimatedSalary != "Low") & (customer_behavior$EstimatedSalary != "Moderate")] = "High"
customer_behavior_clean <- customer_behavior |>
mutate(Gender = as.factor(Gender),
Age = as.factor(Age),
EstimatedSalary = as.factor(EstimatedSalary),
Purchased = as.factor(Purchased)) |>
select(-User.ID)
colSums(is.na(customer_behavior_clean))
RNGkind(sample.kind = "Rounding")
set.seed(1234)
index <- sample(nrow(customer_behavior_clean), nrow(customer_behavior_clean) * 0.8)
customer_behavior_train <- customer_behavior_clean[index,]
customer_behviour_test <- customer_behavior_clean[-index,]
prop.table(table(customer_behavior_train$Purchased))
set.seed(1234)
customer_behavior_train_down <- downSample(x = customer_behavior_train |>
select(-Purchased),
y = customer_behavior_train$Purchased,
yname = "Purchased")
prop.table(table(customer_behavior_train_down$Purchased))
customer_behaviour_model_nb <- naiveBayes(formula = customer_behavior_train_down$Purchased~., data = customer_behavior_train_down)
customer_behaviour_model_nb
customer_prediction_naive <- predict(customer_behaviour_model_nb, newdata = customer_behviour_test, type = "class")
confusionMatrix(data = customer_prediction_naive, reference = customer_behviour_test$Purchased,
positive = "1")
customer_behavior_model_decisiontree <- ctree(formula = customer_behavior_train_down$Purchased~.,
data = customer_behavior_train_down)
plot(customer_behavior_model_decisiontree)
plot(customer_behavior_model_decisiontree,type = "simple")
customer_behavior_prediction_decisiontree <- predict(customer_behavior_model_decisiontree,
newdata = customer_behviour_test,type= "response")
confusionMatrix(data = customer_behavior_prediction_decisiontree, response = customer_behviour_test$Purchased,
positive = "1")
customer_behavior_prediction_decisiontree <- predict(customer_behavior_model_decisiontree,
newdata = customer_behviour_test,type= "response")
confusionMatrix(data = customer_behavior_prediction_decisiontree, response = customer_behviour_test$Purchased)
confusionMatrix(data = customer_behavior_prediction_decisiontree,reference = customer_behviour_test$Purchased)
confusionMatrix(data = customer_behavior_prediction_decisiontree,reference = customer_behviour_test$Purchased,
positive = '1')
q()
q()
q()
q()
q()
demo()
q()
q()
q()
install.packages("dplyr")
install.packages("tidyverse")
library(c(dplyr,tidyverse))
library(dplyr)
library(tidyverse)
Sys.which("R")
q()
install.packages("testthat")
install.packages("testthat")
install.packages("testthat")
library(testthat)
turtle.data = read.csv("turtle.csv")
attach("turtle.csv")
attach(turtle.csv)
update.packages()
x <- (1:5)
x
x = (1:5)
y = (1:5)
y
z = data.frame(x,y)
z
a = sum(z)
a
length(a)
rates <- c(0.06, 0.07, 0.05, 0.09, 0.09,
0.08, 0.08, 0.08)
t <- seq(2,8)
print(t)
pv.1 <- sum(1/(1+ rates)^t))
pv.1 <- sum(1/(1+ rates)^t)
t <- seq(1,8)
print(t)
pv.1 <- sum(1/(1+ rates)^t)
print(pv.1)
library(tidyverse)
install.packages("caret")
library(caret)
install.packages("mlbench")
library(mlbench)
data("PimaIndiansDiabetes2")
View(PimaIndiansDiabetes2)
??set.seed()??
,
??set.seed()
library(dplyr)
training_samples <- PimaIndiansDiabetes2 %>%
createDataPartition(p = 0.8, list = FALSE)
training_samples <- PimaIndiansDiabetes2$diabetes %>%
createDataPartition(p = 0.8, list = FALSE)
trainingdata_samples <- PimaIndiansDiabetes2[training_samples,]
testigdata_sample <- PimaIndiansDiabetes2[-training_samples,]
model <- glm(diabetes ~., data = trainingdata_samples, family = binomial())
summarise(model)
summary(model)
probability <- model %>%
predict(testigdata_sample, type = "response")
predicted.classes <- ifelse(probability > 0.5, "pos","neg")
mean(predicted.classes == testigdata_sample$diabetes)
is.na(PimaIndiansDiabetes2)
na.omit(PimaIndiansDiabetes2)
na.omit(PimaIndiansDiabetes2)
PimaIndiansDiabetes2 <-  na.omit(PimaIndiansDiabetes2)
training_samples <- PimaIndiansDiabetes2$diabetes %>%
createDataPartition(p = 0.8, list = FALSE)
trainingdata_samples <- PimaIndiansDiabetes2[training_samples,]
testigdata_sample <- PimaIndiansDiabetes2[-training_samples,]
model <- glm(diabetes ~., data = trainingdata_samples, family = binomial())
summary(model)
probability <- model %>%
predict(testigdata_sample, type = "response")
predicted.classes <- ifelse(probability > 0.5, "pos","neg")
mean(predicted.classes == testigdata_sample$diabetes)
model <- glm(diabetes ~ glucose, data = trainingdata_samples, family = binomial)
summary(model) $coef
newdata <- data.frame(glucose = c(20,150))
probability_1 <- model %>% predict(newdata, type = response)
probability_1 <- model %>% predict(newdata, type = "response")
predicted.classes_1 <- ifelse(probability_1 > 0.5, "pos","neg")
predicted.classes_1
newdata <- data.frame(glucose = c(20,150))
probability_1 <- model %>% predict(newdata, type = "response")
predicted.classes_1 <- ifelse(probability_1 > 0.5, "pos","neg")
predicted.classes_1
trainingdata_samples %>%
mutate(prob = ifelse(diabetes == "pos", 1,0)) %>%
ggplot(aes(glucose,prob)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(
title = "Logistic Regression Model",
x = "Plasma Glucose Concentration",
y = "Probability of being Diabetes"
)
trainingdata_samples %>%
mutate(prob = ifelse(diabetes == "pos", 1,0)) %>%
ggplot(aes(glucose,prob)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(
title = "Logistic Regression Model (Taking Glucose as single predictor variable)",
x = "Plasma Glucose Concentration",
y = "Probability of being Diabetes"
)
model <- glm(diabetes ~ glucose + mass + pregnant,
data = trainingdata_samples, family = binomial)
summary(model) $coef
coef(model)
model <- glm(diabetes ~ glucose + mass + pregnant + mass + pedigree,
data = trainingdata_samples, family = binomial)
probability_2 <- model %>% predict(testigdata_sample, type = "response")
contrasts(testigdata_sample$diabetes)
predicted.classes <- ifelse(probability_2 > 0.5, "pos","neg")
head(predicted.classes)
mean(predicted.classes == testigdata_sample$diabetes)
install.packages("tidyverse")
library(tidyverse)
turtle_data = read.csv("turtle.csv")
turtle_data = read.csv("/Users/maheshg/Dropbox/Sample Datasets Kaggle/turtle.csv")
head(turtle_data)
par(mfrow = c(2,1))
hist(turtle_data$age,col = "#CFB87C")
par(mfrow = c(1,2))
hist(turtle_data$age,col = "#CFB87C")
hist(turtle.data$income, col="#CFB87C")
hist(turtle_data$income, col="#CFB87C")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
g = ggplot(turtle_data, aes(x = turtle_data$age, y = turtle_data$income)) +
geom_point() +
labs(title = "Scattter Plot of Turtle Data = Income Vs Age")
plot(g)
summary(turtle_data)
turtle_data_age_centered <- 43.00
turtle_data_income_centered <- 60750
df_turtle_data_centered = as.data.frame(age = turtle_data_age_centered,
income = turtle_data_income_centered)
df_turtle_data_centered = data.frame(age = turtle_data_age_centered,
income = turtle_data_income_centered)
head(df_turtle_data_centered)
g1 = ggplot(df_turtle_data_centered, aes(x = df_turtle_data_centered$age,
y = df_turtle_data_centered$income)) +
geom_point() +
labs(title = "Latest Scatter Plot of Turtle Data with Income and Age ")
g1
class(df_turtle_data_centered)
q()
shiny::runApp('~/Dropbox/git repos/On-Going-Projects-/Statistical_Analysis_Shiny')
ui <- fluidPage(
theme = shinytheme("lumen"),
titlePanel("Data Analysis"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Upload CSV file", multiple = FALSE, accept = ".csv"),
br(),
actionButton("analyzeBtn", "Statistical Analysis Results"),
tabsetPanel(
tabPanel("Data", DT::dataTableOutput('tbl')), # Data dalam tabel
tabPanel("Summary Data", verbatimTextOutput("summaryText")),
tabPanel("Box Plot",
fluidRow(
column(width = 4,
h5("Select variables for the boxplot:"),
selectInput("var_box", "Variabel:", "")
),
column(width = 8,
plotOutput("boxPlot")
)
)
),
tabPanel("Bar Plot",
fluidRow(
column(width = 4,
h5("Select variables for the barplot:"),
selectInput("var_bar", "Variabel:", "")
),
column(width = 8,
plotOutput("barPlot")
)
)
),
tabPanel("Data and ANOVA Test Results",
fluidPage(
titlePanel("Analysis of Variance"),
sidebarPanel(
selectInput("vardipen", label = h3("Dependen"),
list("y" = "y"), selected = 1),
selectInput("varindepen", label = h3("Independen"),
list("group" = "group"), selected = 1)
),
mainPanel(
titlePanel("Data"),
DT::dataTableOutput('tbl1'),
titlePanel("Result"),
verbatimTextOutput("anovaText")
)
)
)
)
),
mainPanel()
)
)
fluidPage
